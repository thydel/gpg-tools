#!/usr/bin/env ansible-playbook
---

- name: Defines YAML macros
  hosts: localhost
  gather_facts: False
  vars:
    macros:
      - &ro
        changed_when: False
        check_mode: False
      - &lo
        delegate_to: localhost
        run_once: True
      - &rolo
        <<: *ro
        <<: *lo
    constants:
      - &common
        private_repos_file: private-repos.yml

- name: Assertions
  hosts: all
  gather_facts: False
  run_once: True
  tags: always
  vars: { <<: *common }
  tasks:
    - <<: *lo
      block:
      - assert:
          that: running_ansible_version is version(local_min_ansible_version, '>=')
          fail_msg: min ansible version is {{ local_min_ansible_version }}, ansible version is {{ running_ansible_version }}
        vars:
          default_min_ansible_version: 2.7
          running_ansible_version: '{{ ansible_version.major ~ "." ~ ansible_version.minor }}'
          local_min_ansible_version: '{{ min_ansible_version | default(default_min_ansible_version) }}'
        name: Assert {{ running_ansible_version }} >= {{ local_min_ansible_version }}
      - stat: { path: '{{ file }}' }
        vars: &prf { file: '{{ private_repos_file }}' }
        register: st
        name: Stat {{ file }}
      - assert:
          that: st.stat.exists
          fail_msg: |
            Create a {{ file }} file to define
            - password_store_repo
            - gpg_store_repo
        vars: *prf
        name: Assert {{ file }}
      vars: &assert { assertions: '{{ not no_assert | default(False) }}' }
      when: assertions
      name: Ansible version and {{ private_repos_file }}

- name: Assertions
  hosts: all
  gather_facts: False
  run_once: True
  tags: always
  tasks:
    - <<: *lo
      block:

      - <<: *ro
        command: ssh-add -l
        register: ssh_add
        name: Get cached ssh keys
      - assert:
          that: ssh_add.rc == 0
          fail_msg: Empty ssh agent
        name: Assert we have cached ssh keys

      - git_config:
          name: user.email
          repo: .
          scope: local
        register: git_config
        name: Get user email from git config
      - <<: *ro
        name: Get keygrip of GPG key using email ID
        command: gpg --fingerprint --with-keygrip '<{{ git_config.config_value }}>'
        register: gpg_keygrip
      - assert:
          that: gpg_keygrip.rc == 0
          fail_msg: '{{ gpg_keygrip.stderr }}'
        name: Assert keygrip
      - <<: *ro
        name: Get gpg-agent cache status for GPG passphrase 
        command: gpg-connect-agent
        register: gpg_connect_agent
        args:
          stdin: keyinfo {{ gpg_keygrip.stdout_lines[-1].split()[-1] }}
      - assert:
          that: gpg_connect_agent.stdout_lines[0].split()[6]|int == 1
          fail_msg: passphrase for {{ git_config.config_value }} uncached

      vars: { <<: *assert, agent_check: '{{ not no_agent_check | default(False) }}' }
      when: agent_check and assertions
      name: Check ssh and gpg agent

- hosts: all
  gather_facts: False

  vars:
    <<: *common
    workdir: ext
    password_store_dir: '{{ playbook_dir }}/{{ workdir }}/infra-password-store' # passwordstore lookup needs full path
    gnupg_home_dir: '{{ workdir }}/infra-gpg-store'
    subdir: '{{ set|default("duplicity") }}'

  vars_files: [ '{{ private_repos_file }}' ]

  tasks:

    - set_fact:
        keys:
          - id_epiconcept
          - t.delamare@epiconcept.fr
      name: Choice of ssh key

    - set_fact:
        git_ssh_key_file: |-
          {{ lookup('env', 'GIT_SSH_KEY_FILE') | default('~/.ssh/' ~ keys[1], True) }}
      name: Define git_ssh_key_file

    - file:
        path: '{{ workdir }}'
        state: directory
      <<: *lo
      name: Create {{ workdir }}

    - git:
        repo: '{{ password_store_repo }}'
        dest: '{{ password_store_dir }}'
        key_file: '{{ git_ssh_key_file }}'
      <<: *lo
      tags: clone
      name: Get password store repo

    - git:
        repo: '{{ gpg_store_repo }}'
        dest: '{{ gnupg_home_dir }}'
        key_file: '{{ git_ssh_key_file }}'
      <<: *lo
      tags: clone
      name: Get gpg store repo

    - set_fact: { email: '{{ subdir }}@{{ inventory_hostname }}' }
      name: Define email

    - set_fact: { password: '{{ subdir }}/{{ email }} create=true directory={{ password_store_dir }}' }
      name: Define passwordstore invocation

    - set_fact:
        passphrase: |-
          {{ lookup('passwordstore', password) }}
      name: Generate new password

    - meta: noop
      vars:
        macros:
          - &pass
            environment:
              PASSWORD_STORE_DIR: '{{ password_store_dir }}'
              GIT_SSH_COMMAND: 'ssh -i {{ git_ssh_key_file }}'
            delegate_to: localhost

    - command: pass git rev-parse @
      <<: *pass
      <<: *ro
      register: head
      name: Get head

    - command: pass git rev-parse @{u}
      <<: *pass
      <<: *ro
      register: upstream
      name: Get upstream

    - command: pass git push
      <<: *pass
      when: head.stdout != upstream.stdout
      name: Push new password

    - file:
        path: '{{ gnupg_home_dir }}/{{ subdir }}'
        state: directory
        mode: 0700
      <<: *lo
      name: Create GPG dir

    - &check
      command:
      args:
        argv:
          - gpg
          - --homedir
          - '{{ gnupg_home_dir }}/{{ subdir }}'
          - --list-secret-keys
          - '{{ email }}'
      delegate_to: localhost
      register: gpg
      failed_when: gpg.rc > 2
      <<: *ro
      name: Check GPG keys

    - copy:
        content: |
          Key-Type: default
          Subkey-Type: default
          Name-Real: {{ subdir }}
          Name-Comment: for {{ inventory_hostname }}
          Name-Email: {{ email }}
          Expire-Date: 0
          Passphrase: {{ passphrase }}
          %commit
          %echo done
        dest: &script '{{ workdir }}/{{ inventory_hostname }}.script'
      no_log: True
      delegate_to: localhost
      when: gpg.rc == 2
      name: Generate gpg script

    - command:
      args:
        argv:
          - gpg
          - --homedir
          - '{{ gnupg_home_dir }}/{{ subdir }}'
          - --batch
          - --generate-key
          - *script
      delegate_to: localhost
      when: gpg.rc == 2
      name: Generate GPG keys

    - *check # listing new keys changes trustdb

    - file:
        path: *script
        state: absent
      delegate_to: localhost
      name: Delete gpg script

    - <<: *ro
      command: git -C {{ gnupg_home_dir }} status --porcelain
      delegate_to: localhost
      register: status
      name: Get status

    - command: git -C {{ gnupg_home_dir }} {{ item }}
      delegate_to: localhost
      when: status.stdout_lines|length|int
      with_items:
        - add .
        - commit -m 'Adds {{ email }}'
      name: Add GPG keys

    - <<: *ro
      command: git -C {{ gnupg_home_dir }} rev-parse {{ item }}
      delegate_to: localhost
      register: head_upstream
      with_items: [ '@', '@{u}' ]
      name: Get head and upstream

    - command: git -C {{ gnupg_home_dir }} push
      environment:
        GIT_SSH_COMMAND: 'ssh -i {{ git_ssh_key_file }}'
      delegate_to: localhost
      when: head_upstream.results[0].stdout != head_upstream.results[1].stdout
      name: Push new keys

    - meta: end_play
